{"version":3,"sources":["components/socialLogin.js","components/contact.js","App.js","serviceWorker.js","index.js"],"names":["socialLogin","responseGoogle","response","error","localStorage","setItem","getItem","JSON","stringify","profileObj","setState","userDetails","isUserLoggedIn","console","log","logout","clear","userDetailsLocal","parse","state","className","this","clientId","render","renderProps","onClick","disabled","onSuccess","onFailure","onLogoutSuccess","src","imageUrl","givenName","familyName","email","React","Component","Contact","Boolean","window","location","hostname","match","routing","exact","path","component","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAIaA,EAAb,YACI,aAAe,IAAD,8BACZ,+CAkBFC,eAAiB,SAAAC,GACf,IAAKA,EAASC,MAAO,CACnBC,aAAaC,QAAQ,iBAAkB,QACnBD,aAAaE,QAAQ,kBACzCF,aAAaC,QAAQ,cAAeE,KAAKC,UAAUN,EAASO,aAI5D,EAAKC,SAAS,CACZC,YAAaT,EAASO,WACtBG,gBAAgB,IAGpBC,QAAQC,IAAIZ,IAhCA,EAkCda,OAAS,WACPX,aAAaY,QACb,EAAKN,SAAS,CACZE,gBAAgB,KAlC0B,OAAxCR,aAAaE,QAAQ,gBACvB,EAAKW,iBAAmBb,aAAaE,QAAQ,eAC7C,EAAKW,iBAAmBV,KAAKW,WAH3BD,GAKFJ,QAAQC,IAAI,EAAKG,kBACjB,EAAKE,MAAQ,CACXR,YAAa,EAAKM,iBAClBL,gBAAgB,IAGlB,EAAKO,MAAQ,CACXR,YAAa,GACbC,gBAAgB,GAfR,EADlB,mHA2CM,OACE,yBAAKQ,UAAU,OACZ,KACCC,KAAKF,MAAMP,gBACX,kBAAC,cAAD,CACEU,SAAS,2EACTC,OAAQ,SAAAC,GAAW,OACjB,4BACEJ,UAAU,SACVK,QAASD,EAAYC,QACrBC,SAAUF,EAAYE,UAHxB,qBAKqB,MAGvBC,UAAWN,KAAKpB,eAChB2B,UAAWP,KAAKpB,iBAEjB,IACFoB,KAAKF,MAAMP,gBACV,yBAAKQ,UAAU,uBACb,yBAAKA,UAAU,mBACb,kBAAC,eAAD,CACEE,SAAS,2EACTC,OAAQ,SAAAC,GAAW,OACjB,4BACEJ,UAAU,gBACVK,QAASD,EAAYC,SAFvB,UAIU,MAGZI,gBAAiBR,KAAKN,SAExB,yBAAKK,UAAU,SACb,yBAAKU,IAAKT,KAAKF,MAAMR,YAAYoB,WAAa,KACzC,IACP,yBAAKX,UAAU,QAAf,eACeC,KAAKF,MAAMR,YAAYqB,UAAW,IAC9CX,KAAKF,MAAMR,YAAYsB,WAAY,KAC/B,IACP,yBAAKb,UAAU,SACZ,IACD,+BAAKC,KAAKF,MAAMR,YAAYuB,MAA5B,OAEG,IACP,yBAAKd,UAAU,QACf,yBAAKA,UAAU,SAAf,iCAA2D,KAE5D,SA5Fb,GAAiCe,IAAMC,WCGxBC,E,iLAHP,OAAO,8C,GAFOF,IAAMC,W,SCKVD,IAAMC,U,cCKJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EACF,kBAAC,IAAD,KACI,6BACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9C,IACjC,kBAAC,IAAD,CAAO6C,KAAK,WAAWC,UAAWT,MAK9CU,IAASxB,OAAOoB,EAASK,SAASC,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0e633da6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { GoogleLogin } from \"react-google-login\";\r\nimport { GoogleLogout } from \"react-google-login\";\r\n\r\nexport class socialLogin extends React.Component {\r\n    constructor() {\r\n      super();\r\n      let userDetailsLocal;\r\n      if (localStorage.getItem(\"userDetails\") !== null) {\r\n        this.userDetailsLocal = localStorage.getItem(\"userDetails\");\r\n        this.userDetailsLocal = JSON.parse(userDetailsLocal);\r\n  \r\n        console.log(this.userDetailsLocal);\r\n        this.state = {\r\n          userDetails: this.userDetailsLocal,\r\n          isUserLoggedIn: true\r\n        };\r\n      } else {\r\n        this.state = {\r\n          userDetails: {},\r\n          isUserLoggedIn: false\r\n        };\r\n      }\r\n    }\r\n    responseGoogle = response => {\r\n      if (!response.error) {\r\n        localStorage.setItem(\"isUserLoggedIn\", \"true\");\r\n        var loggedInstate = localStorage.getItem(\"isUserLoggedIn\");\r\n        localStorage.setItem(\"userDetails\", JSON.stringify(response.profileObj));\r\n  \r\n        //console.log(loggedInstate);\r\n  \r\n        this.setState({\r\n          userDetails: response.profileObj,\r\n          isUserLoggedIn: true\r\n        });\r\n      }\r\n      console.log(response);\r\n    };\r\n    logout = () => {\r\n      localStorage.clear();\r\n      this.setState({\r\n        isUserLoggedIn: false\r\n      });\r\n    };\r\n    componentDidMount() {}\r\n    render() {\r\n      return (\r\n        <div className=\"App\">\r\n          {\" \"}\r\n          {!this.state.isUserLoggedIn && (\r\n            <GoogleLogin\r\n              clientId=\"446819204925-vab6anm4a5ahsqbgbu8571a046hrg49g.apps.googleusercontent.com\" //TO BE CREATED\r\n              render={renderProps => (\r\n                <button\r\n                  className=\"button\"\r\n                  onClick={renderProps.onClick}\r\n                  disabled={renderProps.disabled}\r\n                >\r\n                  Log in with Google{\" \"}\r\n                </button>\r\n              )}\r\n              onSuccess={this.responseGoogle}\r\n              onFailure={this.responseGoogle}\r\n            />\r\n          )}{\" \"}\r\n          {this.state.isUserLoggedIn && (\r\n            <div className=\"userDetails-wrapper\">\r\n              <div className=\"details-wrapper\">\r\n                <GoogleLogout\r\n                  clientId=\"446819204925-vab6anm4a5ahsqbgbu8571a046hrg49g.apps.googleusercontent.com\" //TO BE CREATED\r\n                  render={renderProps => (\r\n                    <button\r\n                      className=\"logout-button\"\r\n                      onClick={renderProps.onClick}\r\n                    >\r\n                      Log Out{\" \"}\r\n                    </button>\r\n                  )}\r\n                  onLogoutSuccess={this.logout}\r\n                />\r\n                <div className=\"image\">\r\n                  <img src={this.state.userDetails.imageUrl} />{\" \"}\r\n                </div>{\" \"}\r\n                <div className=\"name\">\r\n                  Welcome Mr. {this.state.userDetails.givenName}{\" \"}\r\n                  {this.state.userDetails.familyName}{\" \"}\r\n                </div>{\" \"}\r\n                <div className=\"email\">\r\n                  {\" \"}\r\n                  <i> {this.state.userDetails.email} </i>\r\n                </div>\r\n              </div>{\" \"}\r\n              <div className=\"bar\" />\r\n              <div className=\"stand\"> welcome to Name search App! </div>{\" \"}\r\n            </div>\r\n          )}{\" \"}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  ","import React from 'react';\r\n\r\nclass Contact extends React.Component{\r\n    render(){\r\n        return <h1>Cootact Us</h1>\r\n    }\r\n}\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Header from \"./components/header.js\";\nimport Footer from \"./components/footer.js\";\nimport socialLogin from \"./components/socialLogin.js\";\n\n\nclass App extends React.Component {\nrender(){\n  return <h1>welcome to react</h1>\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {socialLogin} from './components/socialLogin.js';\nimport Contact from './components/contact.js';\nimport App from './App';\nimport {Route,Link,BrowserRouter as Router} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n    <Router>\n        <div>\n            <Route exact path='/' component={socialLogin}></Route>\n            <Route path=\"/contact\" component={Contact}></Route>\n        </div>\n    </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}